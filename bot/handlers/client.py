from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
import json
from aiogram.dispatcher.filters.state import State, StatesGroup
import aiogram 
import asyncio

from WhoAreYou import who_are_you
from create_bot import bot 
from . import createDB

async def command_start(message : types.Message):
    try:
        await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç üëã\n'
                        '–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç MBTI.\n'
                        '–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ /test, –∏ –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n'
                        '–ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /help, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –∫–æ–º–∞–Ω–¥—ã.')
    except:
        await message.reply('–û–±—â–∞–π—Ç–µ—Å—å –≤ –õ–°:\n'
                            't.me/Myers_Briggs_Typology_bot')


async def help_message(message: types.Message):
    await message.reply("–ü–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏:\n"
                        "   /start - –ù–∞—á–∞–ª–æ –±–æ—Ç–∞. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. \n"
                        "   /help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º. \n"
                        "   /problem - –Ω–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é.\n"
                        "   /test - –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    
with open("/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/forJobasyncpython/workingWithMBTI/QandA/questions.json", "r") as f:
    questions = json.load(f)

question_index = 0
result_test_text, result_test = [], []
class Test(StatesGroup):
    ready = State() # waiting for user's readiness
    question = State() # waiting for user's answer


async def test(message: aiogram.types.Message):
    await message.answer("–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç? –û—Ç–≤–µ—Ç—å—Ç–µ \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\".\n–ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∞ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"—Å—Ç–æ–ø\".")
    await Test.ready.set()

async def ready(message: aiogram.types.Message, state: FSMContext):

    if message.text.lower() == "–¥–∞" or message.text.lower() == "yes":
        question = questions[question_index]
        keyboard = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True)

        for answer in range(len(question["answer"])):
            keyboard.add(aiogram.types.KeyboardButton(question["answer"][answer]))

        await message.answer("–í–æ–ø—Ä–æ—Å ‚Ññ1:")
        await message.answer(question["question"], reply_markup=keyboard)
        await Test.question.set()

    elif message.text.lower() == "–Ω–µ—Ç" or message.text.lower() == "no":
        await message.answer("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", reply_markup=aiogram.types.ReplyKeyboardRemove())
        await state.finish()

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\".")

class Date(StatesGroup):
    surname = State()
    name = State()
    email = State() 
    registered = State()

lst_data_user = []


async def question(message: aiogram.types.Message, state: FSMContext):
    if message.text in [answer for question in questions for answer in question["answer"]]:
        global question_index
        question_index += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ø–∏—Å–∫–µ
        if question_index < len(questions):
           
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
            question = questions[question_index]
            await message.answer(text = "–í–æ–ø—Ä–æ—Å ‚Ññ" + str(question_index + 1) + ":")
            keyboard = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True)
            for answer in range(len(question["answer"])):
                keyboard.add(aiogram.types.KeyboardButton(question["answer"][answer]))
            
            await message.answer(question["question"], reply_markup=keyboard)
            await Test.question.set()
            result_test_text.append(message.text)
            
        else:
            await message.answer("–¢–µ—Å—Ç –∑–∞–∫–æ–Ω—á–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!", reply_markup=aiogram.types.ReplyKeyboardRemove())
            lst_data_user.append(message.from_user.id)
            result_test_text.append(message.text)

            for answer in range(len(questions)):
                if result_test_text[answer] == questions[answer]["answer"][0]:
                    result_test.append(1)
                else:
                    result_test.append(0)

            await state.finish()

            await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞:\n" + str(who_are_you(result_test)) + "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é.")
            await Date.surname.set()
            lst_data_user.append(who_are_you(result_test)[0][0])
            lst_data_user.append(who_are_you(result_test)[0][1])
            question_index = 0
            result_test_text.clear()

    elif message.text.lower() == "stop" or message.text.lower() == "—Å—Ç–æ–ø" or message.text.lower() == "–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å" or message.text.lower() == "end":
            await message.answer("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", reply_markup=aiogram.types.ReplyKeyboardRemove())
            await state.finish()
            question_index = 0
            result_test_text.clear()
            result_test.clear()
            
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")



async def send_surname(message: aiogram.types.Message):
    lst_data_user.append(message.text)
    await Date.name.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–º—è.")

async def send_name(message: aiogram.types.Message, state: FSMContext):
    lst_data_user.append(message.text)
    await Date.email.set()
    await message.answer("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É.")

db = createDB.Database()
db.create_table_user()
db.create_table_results()

with open("/home/divan/–≥–µ—Ç–ë—Ä–µ–π–Ω—Å–ò–¢–æ–ª—å–∫–æ–£–¥–∞–ª–∏–Ø–¢–µ–±z–£–¥–∞–ª—é–°–õ–∏—Ü–∞–ó–µ–º–ª–∏/forJobasyncpython/workingWithMBTI/QandA/personalType.json", "r") as f:
    personal_type = json.load(f)

async def send_email(message: aiogram.types.Message, state: FSMContext):
    lst_data_user.append(message.text)
    print(lst_data_user)
    if db.check_user_exists(message.from_user.id):
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n–ñ–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?")
        await Date.registered.set()
    else:
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        await state.finish()
        db.insert_user(*lst_data_user)
        db.insert_results(abbreviation=who_are_you(result_test)[0][0], personality_type=personal_type[f"{who_are_you(result_test)[0][0]}"],
                          e_i=who_are_you(result_test)[1][0], s_n=who_are_you(result_test)[1][1],
                          t_f=who_are_you(result_test)[1][2], j_p=who_are_you(result_test)[1][3],
                          total=who_are_you(result_test)[0][1], id_user=message.from_user.id)
        lst_data_user.clear()
        result_test.clear()


async def send_registered(message: aiogram.types.Message, state: FSMContext):
    if (message.text.lower() == "yes" or message.text.lower() == "–¥–∞"):
        db.update_user(*lst_data_user)
        db.insert_results(abbreviation=who_are_you(result_test)[0][0], personality_type=personal_type[f"{who_are_you(result_test)[0][0]}"],
                          e_i=who_are_you(result_test)[1][0], s_n=who_are_you(result_test)[1][1],
                          t_f=who_are_you(result_test)[1][2], j_p=who_are_you(result_test)[1][3],
                          total=who_are_you(result_test)[0][1], id_user=message.from_user.id)
        lst_data_user.clear()
        result_test.clear()
        await message.answer(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {message.from_user.id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    elif  message.text.lower() == "–Ω–µ—Ç" or message.text.lower() == "no":
        lst_data_user.clear()
        result_test.clear()

        await message.answer(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {message.from_user.id} –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∏–∑–º–µ–Ω–Ω—ã.")
    await state.finish()



def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–Ω—ë–º'])
    dp.register_message_handler(help_message, commands=['help', '–ø–æ–º–æ—â—å'])
    dp.register_message_handler(test, commands=['test', '—Ç–µ—Å—Ç'], state=None)
    dp.register_message_handler(ready, state = Test.ready)
    dp.register_message_handler(question, state = Test.question)
    dp.register_message_handler(send_surname, state = Date.surname)
    dp.register_message_handler(send_name, state = Date.name)
    dp.register_message_handler(send_email, state = Date.email)
    dp.register_message_handler(send_registered, state = Date.registered)

