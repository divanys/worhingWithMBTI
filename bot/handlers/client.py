from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
import json
from aiogram.dispatcher.filters.state import State, StatesGroup
import aiogram 
import asyncio
import re

from WhoAreYou import who_are_you
from create_bot import bot 
from . import createDB

db = createDB.Database()
db.create_table_user()
db.create_table_results()

async def command_start(message : types.Message):
    try:
        await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç üëã\n'
                        '–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç MBTI.\n'
                        '–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ /test, –∏ –Ω–∞—á–Ω–µ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n'
                        '–ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É /help, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∏–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –∫–æ–º–∞–Ω–¥—ã.')
        await asyncio.sleep(0.2)
        
    except:
        await message.reply('–û–±—â–∞–π—Ç–µ—Å—å –≤ –õ–°:\n'
                            't.me/Myers_Briggs_Typology_bot')


async def help_message(message: types.Message):
    await message.reply("–ü–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ç–≤–æ–µ–π –ø–æ–º–æ—â–∏:\n"
                        "   /start - –ù–∞—á–∞–ª–æ –±–æ—Ç–∞. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. \n"
                        "   /help - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º. \n"
                        "   /problem - –Ω–∞–ø–∏—Å–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é.\n"
                        "   /test - –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    await asyncio.sleep(0.2)

with open("./QandA/questions.json", "r") as f:
    questions = json.load(f)

class Test(StatesGroup):
    ready = State() # waiting for user's readiness
    question = State() # waiting for user's answer


async def test(message: aiogram.types.Message):
    await message.answer("–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç? –û—Ç–≤–µ—Ç—å—Ç–µ \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\".\n–ï—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∞ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ \"—Å—Ç–æ–ø\".")
    await Test.ready.set()
    await asyncio.sleep(0.2)

# class 

async def ready(message: aiogram.types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['question_index'] = 0

    if message.text.lower() == "–¥–∞" or message.text.lower() == "yes":
        async with state.proxy() as data:
            question = questions[data['question_index']]
            keyboard = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True)
            for answer in range(len(question["answer"])):
                keyboard.add(aiogram.types.KeyboardButton(question["answer"][answer]))
            await message.answer("–í–æ–ø—Ä–æ—Å ‚Ññ1:")
            await message.answer(question["question"], reply_markup=keyboard)
            data['question_index'] += 1
        await Test.question.set()
    elif message.text.lower() == "–Ω–µ—Ç" or message.text.lower() == "no":
        await message.answer("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", reply_markup=aiogram.types.ReplyKeyboardRemove())
        await state.finish()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\".")
        await asyncio.sleep(0.2)
class Date(StatesGroup):
    surname = State()
    name = State()
    email = State() 
    registered = State()

with open("./QandA/personalType.json", "r") as f:
    personal_type = json.load(f)

db.create_table_answers()

async def question(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text in [answer for question in questions for answer in question["answer"]]:
            if data['question_index'] < len(questions):
                
                question = questions[data['question_index']]
                db.insert_answers(message.from_user.id, data['question_index'], 
                                  questions[data['question_index'] - 1]["question"], message.text)
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                for answer in range(len(question["answer"])):
                    keyboard.add(types.KeyboardButton(question["answer"][answer]))
                await message.answer(f"–í–æ–ø—Ä–æ—Å ‚Ññ{data['question_index'] + 1}:")
                await message.answer(question["question"], reply_markup=keyboard)
                data['question_index'] += 1
            else:
                await state.finish()
                # db.insert_user_id(message.from_user.id)
                db.insert_answers(message.from_user.id, data['question_index'], 
                                  questions[data['question_index'] - 1]["question"], message.text)
                for answer in range(len(questions)):
                    if db.select_answers_answer(message.from_user.id, answer + 1)[0][0] == questions[answer]["answer"][0]:
                        db.insert_answers_o_or_z(message.from_user.id, answer + 1, 1)
                    else:
                        db.insert_answers_o_or_z(message.from_user.id, answer + 1, 0)
                db.insert_user_id(message.from_user.id)
                db.update_user_result(message.from_user.id, who_are_you(db.select_answers_o_or_z(message.from_user.id))[0][0])
                db.update_user_brightness(message.from_user.id, who_are_you(db.select_answers_o_or_z(message.from_user.id))[0][1])
                
                await message.answer("–ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–µ–≥–æ —Ç–µ—Å—Ç–∞:\n"
                                    f"–í–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {db.select_user_result(message.from_user.id)}"
                                    f"; \n—è—Ä–∫–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞: {db.select_user_brightness(message.from_user.id)}/70.\n" +
                                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é.")
                await Date.surname.set()
                await asyncio.sleep(0.2)

        elif message.text.lower() == "stop" or message.text.lower() == "—Å—Ç–æ–ø" or message.text.lower() == "–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å" or message.text.lower() == "end":
                await message.answer("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.", reply_markup=aiogram.types.ReplyKeyboardRemove())
                await state.finish()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")
        await asyncio.sleep(0.2)


async def send_surname(message: aiogram.types.Message):
    db.update_user_surname(message.from_user.id, message.text)
    await Date.name.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–º—è.")
    await asyncio.sleep(0.2)


async def send_name(message: aiogram.types.Message):
    db.update_user_name(message.from_user.id, message.text)
    await Date.email.set()
    await message.answer("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É.")
    await asyncio.sleep(0.2)


def check_email(text):
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
    pattern = r"[a-zA-Z0-9._%¬±]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
    match = re.search(pattern, text)
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, —Ç–æ —ç—Ç–æ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
    if match:
        return True
    else:
        return False
    
async def send_email(message: aiogram.types.Message, state: FSMContext):
    if not check_email(message.text):
        await message.answer("–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å!")
        await asyncio.sleep(0.2)

    else:
        db.update_user_email(message.from_user.id, message.text)
        if db.check_user_exists(message.from_user.id, db.select_user_email(message.from_user.id)[0][0]):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n–ñ–µ–ª–∞–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?\n–û—Ç–≤–µ—Ç—å—Ç–µ \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\"")
            await Date.registered.set()
        else:
            db.insert_results(who_are_you(db.select_answers_o_or_z(message.from_user.id))[0][0],
                              personal_type[f"{who_are_you(db.select_answers_o_or_z(message.from_user.id))[0][0]}"],
                              who_are_you(db.select_answers_o_or_z(message.from_user.id))[1][0],
                              who_are_you(db.select_answers_o_or_z(message.from_user.id))[1][1],
                              who_are_you(db.select_answers_o_or_z(message.from_user.id))[1][2],
                              who_are_you(db.select_answers_o_or_z(message.from_user.id))[1][3],
                              who_are_you(db.select_answers_o_or_z(message.from_user.id))[0][1],
                              message.from_user.id)
            await asyncio.sleep(0.2)
            await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
            await message.answer(f"–í–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ - —ç—Ç–æ {db.select_results(message.from_user.id)[-1][1]}.\n"
                                 f"–ü–æ —à–∫–∞–ª–µ E-I –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –±–∞–ª–ª–æ–≤: {db.select_results(message.from_user.id)[-1][2]}\n"
                                 f"–ü–æ —à–∫–∞–ª–µ S-N –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –±–∞–ª–ª–æ–≤: {db.select_results(message.from_user.id)[-1][3]}\n"
                                 f"–ü–æ —à–∫–∞–ª–µ T-F –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –±–∞–ª–ª–æ–≤: {db.select_results(message.from_user.id)[-1][4]}\n"
                                 f"–ü–æ —à–∫–∞–ª–µ J-P –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –±–∞–ª–ª–æ–≤: {db.select_results(message.from_user.id)[-1][5]}\n"
                                 "–°–µ–π—á–∞—Å —è –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞—à–µ–º —Ç–∏–ø–µ –ª–∏—á–Ω–æ—Å—Ç–∏!.."
                                 )
            with open(f"./Keirsi/{db.select_results(message.from_user.id)[-1][0]}.pdf", 'rb') as file:
                await bot.send_document(message.from_user.id, file)
            await state.finish()
            db.delete_answers(message.from_user.id)

async def send_registered(message: aiogram.types.Message, state: FSMContext):
    if (message.text.lower() == "yes" or message.text.lower() == "–¥–∞"):
        db.update_user(message.from_user.id, )
        db.update_results(who_are_you(db.select_answers_o_or_z(message.from_user.id))[0][0],
                              personal_type[f"{who_are_you(db.select_answers_o_or_z(message.from_user.id))[0][0]}"],
                              who_are_you(db.select_answers_o_or_z(message.from_user.id))[1][0],
                              who_are_you(db.select_answers_o_or_z(message.from_user.id))[1][1],
                              who_are_you(db.select_answers_o_or_z(message.from_user.id))[1][2],
                              who_are_you(db.select_answers_o_or_z(message.from_user.id))[1][3],
                              who_are_you(db.select_answers_o_or_z(message.from_user.id))[0][1],
                              message.from_user.id)
        await asyncio.sleep(0.2)
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        await message.answer(f"–í–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ - —ç—Ç–æ {db.select_results(message.from_user.id)[-1][1]}.\n"
                                 f"–ü–æ —à–∫–∞–ª–µ E-I –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –±–∞–ª–ª–æ–≤: {db.select_results(message.from_user.id)[-1][2]}\n"
                                 f"–ü–æ —à–∫–∞–ª–µ S-N –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –±–∞–ª–ª–æ–≤: {db.select_results(message.from_user.id)[-1][3]}\n"
                                 f"–ü–æ —à–∫–∞–ª–µ T-F –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –±–∞–ª–ª–æ–≤: {db.select_results(message.from_user.id)[-1][4]}\n"
                                 f"–ü–æ —à–∫–∞–ª–µ J-P –≤—ã –Ω–∞–±—Ä–∞–ª–∏ –±–∞–ª–ª–æ–≤: {db.select_results(message.from_user.id)[-1][5]}\n"
                                 "–°–µ–π—á–∞—Å —è –ø—Ä–∏—à–ª—é —Ñ–∞–π–ª —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞—à–µ–º —Ç–∏–ø–µ –ª–∏—á–Ω–æ—Å—Ç–∏!.."
                                 )
        with open(f"./Keirsi/{db.select_results(message.from_user.id)[-1][0]}.pdf", 'rb') as file:
                await bot.send_document(message.from_user.id, file)
        await state.finish()
        await asyncio.sleep(0.2)
        db.delete_answers(message.from_user.id)

    elif  message.text.lower() == "–Ω–µ—Ç" or message.text.lower() == "no":
        await message.answer(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {message.from_user.id} –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–∏–∑–º–µ–Ω–Ω—ã.")
        await state.finish()
        await asyncio.sleep(0.2)
        db.delete_answers(message.from_user.id)

    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\".")
        await asyncio.sleep(0.2)



def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–Ω–∞—á–Ω—ë–º'])
    dp.register_message_handler(help_message, commands=['help', '–ø–æ–º–æ—â—å'])
    dp.register_message_handler(test, commands=['test', '—Ç–µ—Å—Ç'], state=None)
    dp.register_message_handler(ready, state = Test.ready)
    dp.register_message_handler(question, state = Test.question)
    dp.register_message_handler(send_surname, state = Date.surname)
    dp.register_message_handler(send_name, state = Date.name)
    dp.register_message_handler(send_email, state = Date.email)
    dp.register_message_handler(send_registered, state = Date.registered)

